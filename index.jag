<%
var absolute = require ('modules/absolute.js').mvc;
var goose = require('modules/goose.js').goose;
var router = new goose({CONTEXT: "/store/api/"});
var configs = require('dataconf.json');
var log =new Log();
var carbon = require('carbon');
var mvc = new absolute({
	SERVER_URL:"/store/",
	IGNORE:["sso.jag", "login.jag", "logout.jag"],
	API:"api",
	ROUTER: router
});

// USER APIS
	router.get('users/current', function(ctx){
		if(session.get("user")==null|| session.get("user")==undefined){
			response.sendError(401);
			return;
		}
		print (session.get('user'));
	});
	router.get("users/current/apps", function(ctx){
		var mam = require('/modules/mam.js').mam;
		var mamServer = new mam({mdmServer:configs.mdmServer, user:session.get('user').user});
		var result = mamServer.getUserApps(session.get('user').username);
		print(parse(result.data));
	});

	router.get('users/current/devices', function(ctx){
		var mam = require('/modules/mam.js').mam;
		var mamServer = new mam({mdmServer:configs.mdmServer, user:session.get('user').user});
		log.info("user printing");
		log.info(session.get('user'));
		var result = mamServer.getDevices(session.get('user').username);
		print(result.data);
	});

	router.post('users/authenticate', function(ctx){
		var mam = require('/modules/mam.js').mam;
		var mamServer = new mam({mdmServer:configs.mdmServer});
		var result = mamServer.authenticate(ctx.username, ctx.password);
		if(result.data!=""||result.data!=null){
			log.info(JSON.parse(result.data));
			session.put("user", JSON.parse(result.data));
			var redi ="../../console/user_home";
			if(ctx.appid!=undefined && ctx.appid!=''){
				redi = redi+"?appid="+ctx.appid;
			}
			response.sendRedirect(redi);
		}else{
			response.sendError(401);
		}
	});
	router.get("users/authenticate", function(ctx){
		if(session.get("user")==null|| session.get("user")==undefined){
			response.sendError(401);
		}
	});

	router.get("users/unauthenticate", function(ctx){
		session.put("user", undefined);
		response.sendRedirect("/store/console/home");
	});


// DEVICES APIS

	router.post('devices/{deviceid}/apps/{id}/install', function(ctx){
		log.info("INSIDE");
		var url = configs['mdm']+getAsset(ctx.id).attributes.overview_url; 
		var mam = require('/modules/mam.js').mam;
		log.info(configs.mdmServer);
		var mamServer = new mam({mdmServer:configs.mdmServer, user:session.get('user').user, device:ctx.deviceid});
		log.info("APP URL"+url);
		mamServer.install(url,ctx.deviceid);
	});
	router.post('devices/{deviceid}/apps/{id}/uninstall', function(ctx){
		var package_name = getAsset(ctx.id).attributes.overview_package_name; 
		var mam = require('/modules/mam.js').mam;
		var mamServer = new mam({mdmServer:configs.mdmServer, user:session.get('user').user, device:deviceid});
		mamServer.uninstall(package_name);
	});

	router.get('devices/{deviceid}/apps/{id}/update', function(ctx){
		var package_name = getAsset(ctx.id).attributes.overview_package_name; 
		var mam = require('/modules/mam.js').mam;
		var mamServer = new mam({mdmServer:configs.mdmServer, user:session.get('user').user, device:deviceid});
		mamServer.uninstall(package_name);
	});

// ARTIFACT APIS

	router.get('apps', function(ctx){
		var registry = getRegistry();
		var am = new carbon.registry.ArtifactManager(registry, 'android');
		var items =am.list();
		print(sp(items));
	});
	

  
	router.get('apps/android',function(ctx){
		var registry = getRegistry();
		var am = new carbon.registry.ArtifactManager(registry, 'android');
		var items =am.list();
		print(sp(items));
	});
	router.get('apps/ios',function(ctx){
		var registry = getRegistry();
		var am = new carbon.registry.ArtifactManager(registry, 'android');
		var items =am.list();
		print(sp(items));
	});
	router.get('apps/{id}',function(ctx){
		log.info('got');
	 	var item =  getAsset(ctx.id);
		if(item!=undefined){
			print (item);
			return;
		}
		response.sendError(404);
	});
	router.get('popular', function(ctx){
		var registry = getRegistry();
		var am = new carbon.registry.ArtifactManager(registry, 'android');
		var items = am.list();
		items.sort(function (l, r) {
	        return registry.rating(l.path).average > registry.rating(r.path).average;
	    });
		print(sp(items));
	});
	router.get('newest', function(ctx){
		var registry = getRegistry();
		var am = new carbon.registry.ArtifactManager(registry, 'android');
		var items = am.list();
	    items.sort(function (l, r) {
	           return registry.get(l.path).created.time < registry.get(r.path).created.time;
	    });
		print(sp(items));
	});

//MODULE APIS

	var getPackageName = function(appid){
		var item = getAsset(appid); 
	}
	var getAsetForPackage = function(packagename){
		var registry = getRegistry();
		var am = new carbon.registry.ArtifactManager(registry, 'android');
		var items = am.list();
		var arr= [];
		for (var i = items.length - 1; i >= 0; i--){
			var item = items[i];
			if(item.attributes.overview_package_name==packagename){
				arr.push(spli(item));
			}
		};
		print(sp(arr));
	}
	var getAsset = function(appid){
		var registry = getRegistry();
		var am = new carbon.registry.ArtifactManager(registry, 'android');
		var item = spli(am.get(appid));
		if(item!=null){
			return item;
		}
	}
	//Method to filter live artifacts
	var sp = function(items){
		var arr = [];
		for (var i = items.length - 1; i >= 0; i--){
			var item = items[i];
			if(item.attributes.overview_status=="LIVE"){
				arr.push(spli(item));
			}
		};
		return arr;
	}
	//Method to convert the image screenshots to an array
	var spli = function(item){
		if(item.attributes.overview_status=="LIVE"){
			item.attributes.images_screenshots =item.attributes.images_screenshots.split(',');
			return item;
		}
		return null;
	}

  comments = function (aid, paging) {
      return registry().comments(aid, paging);
  };

  commentCount = function (aid) {
      return registry().commentCount(aid);
  };


  comment = function (aid, comment) {
      return registry().comment(aid, comment);
  };

  rating = function (aid) {
      var store = require('/dataconf.json'),
          user = require('/modules/user.js').current();
      return getRegistry().rating(aid, user ? user.username : store.user.username);
  };

  rate = function (aid, rating) {
      return getRegistry().rate(aid, rating);
  };
  getRegistry =function(){
		    server = new carbon.server.Server(),
		   	registry = new carbon.registry.Registry(server, {
		           username : 'admin',
		           tenantId : -1234
		       });
		return registry;
  }

mvc.route(request);
%>
